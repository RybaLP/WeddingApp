(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@bbob/preset'), require('@bbob/plugin-helper')) :
    typeof define === 'function' && define.amd ? define(['exports', '@bbob/preset', '@bbob/plugin-helper'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.BbobPresetHTML5 = {}, global.preset, global.pluginHelper));
})(this, (function (exports, preset, pluginHelper) { 'use strict';

    const isStartsWith = (node, type)=>node[0] === type;
    const styleMap = {
        color: (val)=>`color:${val};`,
        size: (val)=>`font-size:${val};`
    };
    const getStyleFromAttrs = (attrs)=>Object.keys(attrs).reduce((acc, key)=>styleMap[key] ? acc.concat(styleMap[key](attrs[key])) : acc, []).join(' ');
    const asListItems = (content)=>{
        let listIdx = 0;
        const listItems = [];
        const createItemNode = ()=>pluginHelper.TagNode.create('li');
        const ensureListItem = (val)=>{
            listItems[listIdx] = listItems[listIdx] || val;
        };
        const addItem = (val)=>{
            if (listItems[listIdx] && listItems[listIdx].content) {
                listItems[listIdx].content = listItems[listIdx].content.concat(val);
            } else {
                listItems[listIdx] = listItems[listIdx].concat(val);
            }
        };
        content.forEach((el)=>{
            if (pluginHelper.isStringNode(el) && isStartsWith(el, '*')) {
                if (listItems[listIdx]) {
                    listIdx++;
                }
                ensureListItem(createItemNode());
                addItem(el.substr(1));
            } else if (pluginHelper.isTagNode(el) && pluginHelper.TagNode.isOf(el, '*')) {
                if (listItems[listIdx]) {
                    listIdx++;
                }
                ensureListItem(createItemNode());
            } else if (!pluginHelper.isTagNode(listItems[listIdx])) {
                listIdx++;
                ensureListItem(el);
            } else if (listItems[listIdx]) {
                addItem(el);
            } else {
                ensureListItem(el);
            }
        });
        return [].concat(listItems);
    };
    const renderUrl = (node, render)=>pluginHelper.getUniqAttr(node.attrs) ? pluginHelper.getUniqAttr(node.attrs) : render(node.content);
    const toNode = (tag, attrs, content)=>({
            tag,
            attrs,
            content
        });
    const toStyle = (style)=>({
            style
        });
    var defaultTags = {
        b: (node)=>toNode('span', toStyle('font-weight: bold;'), node.content),
        i: (node)=>toNode('span', toStyle('font-style: italic;'), node.content),
        u: (node)=>toNode('span', toStyle('text-decoration: underline;'), node.content),
        s: (node)=>toNode('span', toStyle('text-decoration: line-through;'), node.content),
        url: (node, { render  }, options)=>toNode('a', {
                href: renderUrl(node, render)
            }, node.content),
        img: (node, { render  })=>toNode('img', {
                src: render(node.content)
            }, null),
        quote: (node)=>toNode('blockquote', {}, [
                toNode('p', {}, node.content)
            ]),
        code: (node)=>toNode('pre', {}, node.content),
        style: (node)=>toNode('span', toStyle(getStyleFromAttrs(node.attrs)), node.content),
        list: (node)=>{
            const type = pluginHelper.getUniqAttr(node.attrs);
            return toNode(type ? 'ol' : 'ul', type ? {
                type
            } : {}, asListItems(node.content));
        },
        color: (node)=>toNode('span', toStyle(`color: ${pluginHelper.getUniqAttr(node.attrs)};`), node.content)
    };

    var index = preset.createPreset(defaultTags);

    exports.default = index;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
