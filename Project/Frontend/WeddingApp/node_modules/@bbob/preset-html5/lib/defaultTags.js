/* eslint-disable no-plusplus,no-lonely-if */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _pluginHelper = require("@bbob/plugin-helper");
var isStartsWith = function(node, type) {
    return node[0] === type;
};
var styleMap = {
    color: function(val) {
        return "color:" + val + ";";
    },
    size: function(val) {
        return "font-size:" + val + ";";
    }
};
var getStyleFromAttrs = function(attrs) {
    return Object.keys(attrs).reduce(function(acc, key) {
        return styleMap[key] ? acc.concat(styleMap[key](attrs[key])) : acc;
    }, []).join(" ");
};
var asListItems = function(content) {
    var listIdx = 0;
    var listItems = [];
    var createItemNode = function() {
        return _pluginHelper.TagNode.create("li");
    };
    var ensureListItem = function(val) {
        listItems[listIdx] = listItems[listIdx] || val;
    };
    var addItem = function(val) {
        if (listItems[listIdx] && listItems[listIdx].content) {
            listItems[listIdx].content = listItems[listIdx].content.concat(val);
        } else {
            listItems[listIdx] = listItems[listIdx].concat(val);
        }
    };
    content.forEach(function(el) {
        if ((0, _pluginHelper.isStringNode)(el) && isStartsWith(el, "*")) {
            if (listItems[listIdx]) {
                listIdx++;
            }
            ensureListItem(createItemNode());
            addItem(el.substr(1));
        } else if ((0, _pluginHelper.isTagNode)(el) && _pluginHelper.TagNode.isOf(el, "*")) {
            if (listItems[listIdx]) {
                listIdx++;
            }
            ensureListItem(createItemNode());
        } else if (!(0, _pluginHelper.isTagNode)(listItems[listIdx])) {
            listIdx++;
            ensureListItem(el);
        } else if (listItems[listIdx]) {
            addItem(el);
        } else {
            ensureListItem(el);
        }
    });
    return [].concat(listItems);
};
var renderUrl = function(node, render) {
    return (0, _pluginHelper.getUniqAttr)(node.attrs) ? (0, _pluginHelper.getUniqAttr)(node.attrs) : render(node.content);
};
var toNode = function(tag, attrs, content) {
    return {
        tag: tag,
        attrs: attrs,
        content: content
    };
};
var toStyle = function(style) {
    return {
        style: style
    };
};
var _default = {
    b: function(node) {
        return toNode("span", toStyle("font-weight: bold;"), node.content);
    },
    i: function(node) {
        return toNode("span", toStyle("font-style: italic;"), node.content);
    },
    u: function(node) {
        return toNode("span", toStyle("text-decoration: underline;"), node.content);
    },
    s: function(node) {
        return toNode("span", toStyle("text-decoration: line-through;"), node.content);
    },
    url: function(node, param, options) {
        var render = param.render;
        return toNode("a", {
            href: renderUrl(node, render, options)
        }, node.content);
    },
    img: function(node, param) {
        var render = param.render;
        return toNode("img", {
            src: render(node.content)
        }, null);
    },
    quote: function(node) {
        return toNode("blockquote", {}, [
            toNode("p", {}, node.content)
        ]);
    },
    code: function(node) {
        return toNode("pre", {}, node.content);
    },
    style: function(node) {
        return toNode("span", toStyle(getStyleFromAttrs(node.attrs)), node.content);
    },
    list: function(node) {
        var type = (0, _pluginHelper.getUniqAttr)(node.attrs);
        return toNode(type ? "ol" : "ul", type ? {
            type: type
        } : {}, asListItems(node.content));
    },
    color: function(node) {
        return toNode("span", toStyle("color: " + (0, _pluginHelper.getUniqAttr)(node.attrs) + ";"), node.content);
    }
};
